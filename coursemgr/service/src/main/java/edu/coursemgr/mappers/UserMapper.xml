<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.coursemgr.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="edu.coursemgr.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="serialNo" property="serialNo" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="levelPwd" property="levelPwd" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="college" property="college" jdbcType="VARCHAR" />
    <result column="profession" property="profession" jdbcType="VARCHAR" />
    <result column="cellphone" property="cellphone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="roles" property="roles" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="CHAR" />
    <result column="hasLogin" property="hasLogin" jdbcType="INTEGER" />
    <result column="createDate" property="createDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="UserGroupMap" type="edu.coursemgr.pojo.UserGroup" >
    <result column="studentNo" property="studentNo" jdbcType="VARCHAR" />
    <result column="studentName" property="studentName" jdbcType="VARCHAR" />
    <result column="groupNo" property="groupNo" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, serialNo, password, levelPwd, name, college, profession, cellphone, email, roles, sex,
    hasLogin, createDate
  </sql>
  <select id="selectUserGroup" resultMap="UserGroupMap" parameterType="java.lang.Integer" >
    select gm.studentNo, g.groupNo, u.name as studentName
    from group_member gm left join `group` g
    on g.id=gm.groupId left join user u
    on gm.studentNo = u.serialNo
    where groupId in (select id from `group`
    where courseId=#{courseId, jdbcType=INTEGER})
  </select>
  <select id="selectUserGroupPage" resultMap="UserGroupMap" parameterType="java.util.HashMap" >
    select gm.studentNo, g.groupNo, u.name as studentName
    from group_member gm left join `group` g
    on g.id=gm.groupId left join user u
    on gm.studentNo = u.serialNo
    where groupId in (select id from `group`
    where courseId=#{courseId, jdbcType=INTEGER})
    limit ${offset}, ${pageSize}
  </select>
  <select id="selectUserGroupTotalCnt" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select count(gm.studentNo)
    from group_member gm left join `group` g
    on g.id=gm.groupId left join user u
    on gm.studentNo = u.serialNo
    where groupId in (select id from `group`
    where courseId=#{courseId, jdbcType=INTEGER})
  </select>
  <select id="getFinishedTaskStuTotalCnt" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select count(studentNo) from course_students where studentNo in
    (select st.studentNo from student_tasks st, course_tasks c
    where st.status='FINISHED' and c.courseId=#{courseId, jdbcType=INTEGER} and st.taskId=c.id)
  </select>
  <select id="selectFinishedTaskStu" resultMap="BaseResultMap" parameterType="java.util.HashMap" >
    select u.* from user u, course_students cs where u.serialNo=cs.studentNo
    and cs.studentNo in
    (select st.studentNo from student_tasks st, course_tasks c
    where st.status='FINISHED' and c.courseId=#{courseId, jdbcType=INTEGER} and st.taskId=c.id)
    limit ${offset}, ${pageSize}
  </select>
  <select id="selectBySerialNo" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from user
    where serialNo = #{serialNo,jdbcType=VARCHAR}
  </select>
  <select id="selectSomeByCourseId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from user
    where serialNo in (
      select studentNo
      from course_students
      where courseId= #{courseId, jdbcType=INTEGER}
    )
  </select>
  <select id="selectSomeByPage" resultMap="BaseResultMap" parameterType="java.util.HashMap" >
    select
    <include refid="Base_Column_List" />
    from user
    where serialNo in (
    select studentNo
    from course_students
    where courseId= #{courseId, jdbcType=INTEGER}
    ) order by createDate desc limit ${currSize},${pageSize}
  </select>
  <select id="selectTotalCntByCourseId" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select
    count(serialNo) as totalCount
    from user
    where serialNo in (
    select studentNo
    from course_students
    where courseId= #{courseId, jdbcType=INTEGER}
    )
  </select>
  <select id="selectTotalCntByRole" resultType="java.lang.Integer" parameterType="java.util.HashMap" >
    select
    count(serialNo)
    from user
    where FIND_IN_SET(#{role, jdbcType=VARCHAR},roles)
    <if test="nameOrNo != null and nameOrNo != ''">
      and (name like %#{nameOrNo, jdbcType=VARCHAR}%
      or serialNo like %#{nameOrNo, jdbcType=VARCHAR}%)
    </if>
  </select>
  <select id="selectSomeByRole" resultMap="BaseResultMap" parameterType="java.util.HashMap" >
    select
    count(serialNo) as totalCount
    from user
    where FIND_IN_SET(#{role, jdbcType=VARCHAR},roles)
    <if test="nameOrNo != null and nameOrNo != ''">
      and (name like %#{nameOrNo, jdbcType=VARCHAR}%
      or serialNo like %#{nameOrNo, jdbcType=VARCHAR}%)
    </if>
    order by createDate desc limit ${offset},${pageSize}
  </select>
  <select id="selectSomByGroupId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from User where serialNo in (select studentNo from group_member where groupId=#{groupId,jdbcType=INTEGER})
  </select>
  <select id="selectSomeNoGroup" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from user where serialNo in
    (select studentNo from course_students where studentNo not in (
    select studentNo from group_member where courseId=#{courseId,jdbcType=INTEGER}
    ) and courseId=#{courseId,jdbcType=INTEGER})
  </select>
  <delete id="deleteById" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="edu.coursemgr.model.User" >
    insert into user (serialNo, password,levelPwd,
      name, college, profession,
      cellphone, email, roles,
      sex,hasLogin, createDate)
    values (#{serialNo,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},#{levelPwd,jdbcType=VARCHAR},
      #{name,jdbcType=VARCHAR}, #{college,jdbcType=VARCHAR}, #{profession,jdbcType=VARCHAR},
      #{cellphone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{roles,jdbcType=VARCHAR},
      #{sex,jdbcType=CHAR},#{hasLogin,jdbcType=INTEGER}, now())
  </insert>
  <insert id="insertSelective" parameterType="edu.coursemgr.model.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="serialNo != null" >
        serialNo,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="levelPwd != null" >
        levelPwd,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="college != null" >
        college,
      </if>
      <if test="profession != null" >
        profession,
      </if>
      <if test="cellphone != null" >
        cellphone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="roles != null" >
        roles,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="hasLogin != null" >
        hasLogin,
      </if>
      <if test="createDate != null" >
        createDate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="serialNo != null" >
        #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="levelPwd != null" >
        #{levelPwd,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="college != null" >
        #{college,jdbcType=VARCHAR},
      </if>
      <if test="profession != null" >
        #{profession,jdbcType=VARCHAR},
      </if>
      <if test="cellphone != null" >
        #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="roles != null" >
        #{roles,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=CHAR},
      </if>
      <if test="hasLogin != null" >
        #{hasLogin,jdbcType=INTEGER},
      </if>
      <if test="createdate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="edu.coursemgr.model.User" >
    update user
    <set >
      <if test="serialno != null" >
        serialNo = #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="levelPwd != null" >
        levelPwd = #{levelPwd,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="college != null" >
        college = #{college,jdbcType=VARCHAR},
      </if>
      <if test="profession != null" >
        profession = #{profession,jdbcType=VARCHAR},
      </if>
      <if test="cellphone != null" >
        cellphone = #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="roles != null" >
        roles = #{roles,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="hasLogin != null" >
        hasLogin = #{hasLogin,jdbcType=INTEGER},
      </if>
      <if test="createdate != null" >
        createDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.coursemgr.model.User" >
    update user
    set serialNo = #{serialNo,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      levelPwd = #{levelPwd,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      college = #{college,jdbcType=VARCHAR},
      profession = #{profession,jdbcType=VARCHAR},
      cellphone = #{cellphone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      roles = #{roles,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      hasLogin = #{hasLogin,jdbcType=INTEGER},
      createDate = #{createDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateBySerialNo" parameterType="edu.coursemgr.model.User">
    update user
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="college != null" >
        college = #{college,jdbcType=VARCHAR},
      </if>
      <if test="profession != null" >
        profession = #{profession,jdbcType=VARCHAR},
      </if>
      <if test="cellphone != null" >
        cellphone = #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=INTEGER},
      </if>
      <if test="levelPwd != null" >
        levelPwd = #{levelPwd,jdbcType=INTEGER},
      </if>
      <if test="hasLogin != null" >
        hasLogin = #{hasLogin,jdbcType=INTEGER},
      </if>
    </set>
    where serialNo = #{serialNo, jdbcType=VARCHAR}
  </update>
</mapper>
