<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.coursemgr.dao.GroupMapper" >
  <resultMap id="BaseResultMap" type="edu.coursemgr.model.Group" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <id column="groupNo" property="groupNo" jdbcType="INTEGER" />
    <result column="groupLeaderNo" property="groupLeaderNo" jdbcType="VARCHAR" />
    <result column="leaderName" property="leaderName" jdbcType="VARCHAR" />
    <result column="courseId" property="courseId" jdbcType="INTEGER" />
    <result column="createDate" property="createDate" jdbcType="TIMESTAMP" />
    <result column="groupedType" property="groupedType" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, groupNo, groupLeaderNo, leaderName,courseId, createDate, groupedType
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from `group`
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByStudent" resultMap="BaseResultMap" parameterType="java.util.HashMap" >
    select
    <include refid="Base_Column_List" />
    from `group` where id = (select groupId
    from group_member where studentNo=#{studentNo,jdbcType=VARCHAR}
    and courseId=#{courseId,jdbcType=INTEGER})
  </select>
  <select id="getGroupList" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from `group`
    where courseId = #{courseId,jdbcType=INTEGER}
  </select>
  <select id="getLastGroupNo" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select
    groupNo
    from `group`
    where courseId = #{courseId,jdbcType=INTEGER}
    order by groupNo desc
    limit 1
  </select>
  <delete id="deleteById" parameterType="java.lang.Integer" >
    delete from `group`
    where id = #{id,jdbcType=INTEGER};
    delete from group_member where groupId=#{id,jdbcType=INTEGER};
  </delete>
  <insert id="insert" parameterType="edu.coursemgr.model.Group" useGeneratedKeys="true" keyProperty="id">
    insert into `group` (groupNo, groupLeaderNo,leaderName, courseId,
      createDate,groupedType)
    values (#{groupNo,jdbcType=INTEGER}, #{groupLeaderNo,jdbcType=VARCHAR},#{leaderName,jdbcType=VARCHAR}, #{courseId,jdbcType=INTEGER},
      #{createDate,jdbcType=TIMESTAMP}, #{groupedType,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="edu.coursemgr.model.Group" >
    insert into `group`
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="groupNo != null" >
        groupNo,
      </if>
      <if test="groupLeaderNo != null" >
        groupLeaderNo,
      </if>
      <if test="leaderName != null" >
        leaderName,
      </if>
      <if test="courseId != null" >
        courseId,
      </if>
      <if test="createDate != null" >
        createDate,
      </if>
      <if test="groupedType != null" >
        groupedType,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="groupNo != null" >
        #{groupNo,jdbcType=INTEGER},
      </if>
      <if test="groupLeaderNo != null" >
        #{groupLeaderNo,jdbcType=VARCHAR},
      </if>
      <if test="leaderName != null" >
        #{leaderName,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="groupedType != null" >
        #{groupedType,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByIdSelective" parameterType="edu.coursemgr.model.Group" >
    update `group`
    <set >
      <if test="groupNo != null" >
        groupNo = #{groupNo,jdbcType=INTEGER},
      </if>
      <if test="groupLeaderNo != null" >
        groupLeaderNo = #{groupLeaderNo,jdbcType=VARCHAR},
      </if>
      <if test="groupLeaderNo != null" >
        leaderName = #{leaderName,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        courseId = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        createDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="groupedType != null" >
        groupedType = #{groupedType,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.coursemgr.model.Group" >
    update `group`
    set groupNo = #{groupNo,jdbcType=INTEGER},
      groupLeaderNo = #{groupLeaderNo,jdbcType=VARCHAR},
    leaderName = #{leaderName,jdbcType=VARCHAR},
      courseId = #{courseId,jdbcType=INTEGER},
      createDate = #{createDate,jdbcType=TIMESTAMP},
    groupedType=#{groupedType,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateGroupNo" parameterType="edu.coursemgr.model.Group" >
    update `group`
    set groupNo = groupNo - 1
    where groupNo > #{groupNo,jdbcType=INTEGER} and id = #{id, jdbcType=INTEGER}
  </update>
</mapper>